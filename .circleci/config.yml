version: 2.1

orbs:
  jq: circleci/jq@3.0.0

resource_job_defaults: &resource_job_defaults
  docker:
    - image: 'cimg/base:2021.02-20.04'
  steps:
    - run:
        name: verify required Environment Variables
        command: |
          if [ -z "${CIRCLE_HOSTNAME}" -o -z "${CIRCLE_TOKEN}" ];then
            echo "You must provide 2 Environment Variables in project settings for this job to run."
            echo "CIRCLE_HOSTNAME: Should be the scheme://domain of your install. \"https://ci.example.com\""
            echo "CIRCLE_TOKEN: Should be the API Key of an admin or project level with Scope:All"
            exit 1
          fi
    - run:
        name: verify required Proxy Environment Variables
        command: |
          if [ -z "${HTTP_PROXY}" -o -z "${HTTPS_PROXY}" ];then
            echo "You must provide 2 Environment Variables in project settings for vm/docker job to run - HTTP_PROXY & HTTPS_PROXY"
            exit 1
          fi          
    - run:
        name: verify that job ran with the requested resource_class option
        command: |
          curl -k \
          "${CIRCLE_HOSTNAME%/}/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM?\
          circle-token=$CIRCLE_TOKEN" | \
          jq '.picard.resource_class.class' | grep $CIRCLE_JOB

remote_docker_defaults: &remote_docker_defaults
  docker: [{image: 'docker:17.06-git'}]

include_proxy_env: &include_proxy_env
  name: "Set Proxy Env"
  command: |
    mkdir -p ~/.docker
    cat \<<EOF > ~/.docker/config.json
    {
    "proxies":
    {
      "default":
    {
      "httpProxy": "http://proxy.atul-proxy.internal:3128",
      "httpsProxy": "http://proxy.atul-proxy.internal:3128",
      "noProxy": "10.0.0.0/16,localhost,127.0.0.1,10.42.0.0/16,10.43.0.0/16,k3s.atul-proxy.internal"
    }
    }
    }
    EOF

basic_docker_build: &basic_docker_build
  name: "Build a really basic docker image"
  command: |
    hostname
    dockerfile=Dockerfile
    echo "FROM alpine:latest" > $dockerfile
    echo "RUN echo hello" >> $dockerfile
    docker network ls
    docker inspect $(docker network ls | grep -w bridge | awk '{print $1}')
    ip route
    docker build -f $dockerfile --tag throwaway:$CIRCLE_BUILD_NUM .
    docker run --rm throwaway:$CIRCLE_BUILD_NUM

contexts_defaults: &contexts_defaults
  docker: [{image: 'alpine:latest'}]
  working_directory: /a/contexts/test

workspaces_defaults: &workspaces_defaults
  docker: [{image: 'circleci/node:latest'}]
  working_directory: ~/foo/bar

jobs:
  # jq Orb job
  orb-test: # 1 vCPU, 2GB RAM
    docker:
      - image: cimg/base:2021.11  
    steps:
      - run: which docker
      - run: docker -v
      - run: hostname    
      - run:
          <<: *include_proxy_env 
      - jq/install:
          version: jq-1.7
      - run: jq version
      
  # resource class jobs
  small: # 1 vCPU, 2GB RAM
    <<: *resource_job_defaults
    resource_class: small

  medium: # 2 vCPUs, 4GB RAM
    <<: *resource_job_defaults
    resource_class: medium

  medium-plus: # 3 vCPUs, 6GB RAM
    <<: *resource_job_defaults
    resource_class: medium+

  large: # 4 vCPUs, 8GB RAM
    <<: *resource_job_defaults
    resource_class: large

  xlarge: # 8 vCPUs, 16GB RAM
    <<: *resource_job_defaults
    resource_class: xlarge

  # check if EC2
  run_arm_jobs_if_ec2:
    machine: true
    steps:
      - run: |
          result=$(curl http://169.254.169.254/latest/meta-data/instance-type)
          if [[ $result == *"Not Found"* ]]; then exit 1; fi
    environment:
      SLEEP: 1

  # linux jobs
  medium_linux:
    machine: true
    resource_class: medium
    steps:
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1
  
  large_linux:
    machine: true
    resource_class: large
    steps:
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  xlarge_linux:
    machine: true
    resource_class: xlarge
    steps:
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  large2x_linux:
    machine: true
    resource_class: 2xlarge
    steps:
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  # windows jobs
  medium_windows:
    machine:
      image: windows-default
    resource_class: windows.medium
    steps:
      - checkout
      - run: systeminfo

  large_windows:
    machine:
      image: windows-default
    resource_class: windows.large
    steps:
      - checkout
      - run: systeminfo

  xlarge_windows:
    machine:
      image: windows-default
    resource_class: windows.xlarge
    steps:
      - checkout
      - run: systeminfo

  large2x_windows:
    machine:
      image: windows-default
    resource_class: windows.2xlarge
    steps:
      - checkout
      - run: systeminfo


  # arm jobs
  medium_arm:
    machine:
      image: arm-default
    resource_class: arm.medium
    steps:
      - run:
          <<: *include_proxy_env      
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          hostname
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  large_arm:
    machine:
      image: arm-default
    resource_class: arm.large
    steps:
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  # vm jobs
  remote_docker:
    <<: *remote_docker_defaults
    steps:
      - run: apk update && apk add sudo
      - run: which docker
      - run: docker -v
      - run: hostname
      - setup_remote_docker
      - run:
          <<: *include_proxy_env      
      - run:
          <<: *basic_docker_build
      - run: docker version

  docker_layer_caching:
    <<: *remote_docker_defaults
    steps:
      - run: apk update && apk add sudo    
      - run: which docker
      - run: docker -v
      - run: hostname
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          <<: *include_proxy_env          
      - run:
          <<: *basic_docker_build
      - run: docker version

  machine_dlc:
    machine:
      docker_layer_caching: true
    steps:
      - run: which docker
      - run: docker -v
      - run: hostname
      - run:
          <<: *include_proxy_env      
      - run:
          <<: *basic_docker_build
      - run: docker version

  # feature jobs
  contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep CONTEXT_END_TO_END_TEST_VAR
      - run: echo $CONTEXT_END_TO_END_TEST_VAR

  multi-contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep MULTI_CONTEXT_END_TO_END_VAR
      - run: echo $CONTEXT_END_TO_END_TEST_VAR

  write_workspace:
    <<: *workspaces_defaults
    steps:
      - run: mkdir stuff
      - run: echo 5 >./stuff/thing
      - persist_to_workspace:
          root: .
          paths:
            - stuff

  read_workspace:
    <<: *workspaces_defaults
    steps:
      - attach_workspace:
           at: ./attached
      - run: |
          if [[ $(< ./attached/stuff/thing) != '5' ]]; then
            echo 'Sadness, the value is not what we expected, so the workspace write/read did not work'
            exit 1
          else
            echo 'Yay, value matches'
            exit 0
          fi

  save_and_restore_cache:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/realitycheck
    steps:
      - run: |
         mkdir -p ~/.ssh
         cat > config \<<EOF
         Host  github.com
           User git
           ProxyCommand nc -x proxy.atul-proxy.internal:3128 -Xconnect %h %p
         EOF
         chmod 600 config
         mv config ~/.ssh/config
         chmod 600 ~/.ssh
      - checkout
      - run: mkdir -p stuff
      - run: echo 5 >./stuff/thing

      - save_cache:
          key: v3-file-cache-{{ .BuildNum }}
          paths:
            - ./stuff/thing

      - run: rm -rf ./stuff/thing
      - run: sleep 5

      - restore_cache:
            keys:
              - v3-file-cache-{{ .BuildNum }}

      - run: |
            if [[ $(< stuff/thing) != '5' ]]; then
              exit 1
            else
              echo "The cache was populated"
            fi

  artifacts_test_results:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/realitycheck
    steps:
      - run: |
         mkdir -p ~/.ssh
         cat > config \<<EOF
         Host  github.com
           User git
           ProxyCommand nc -x proxy.atul-proxy.internal:3128 -Xconnect %h %p
         EOF
         chmod 600 config
         mv config ~/.ssh/config
         chmod 600 ~/.ssh    
      - checkout
      - run:
          name: Creating Dummy Artifacts
          command: |
            echo "my artifact file" > /tmp/artifact-1.txt;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/artifact-2.txt;

      - store_artifacts:
          path: /tmp/artifact-1.txt
          destination: artifact-file.txt

      - store_artifacts:
          path: /tmp/artifacts

      - store_test_results:
          path: test-results

  runner:
    docker:
      - image: cimg/base:2021.11
    resource_class: atul/test
    steps:
      - run:
          <<: *include_proxy_env      
      - run: echo "Hi I'm on Runners!"

          
## ========================================================================
##                WORKFLOW
## ========================================================================
workflows:
  version: 2
  resource_class_jobs:
    jobs:
      - small
      - medium
      # - medium+
      # - large
      # - xlarge

  vm_jobs:
    jobs:
      - remote_docker
      - docker_layer_caching
      - machine_dlc

  feature_jobs:
    jobs:
      - save_and_restore_cache
      - contexts:
          context: atul-org-global
      - multi-contexts:
          context: atul-individual-local
      - write_workspace
      - read_workspace:
          requires:
            - write_workspace
      - artifacts_test_results

  linux_jobs:
    jobs:
      - medium_linux
      # - large_linux
      # - xlarge_linux
      # - 2xlarge_linux

  windows_jobs:
    jobs:
      - medium_windows
      # - large_windows
      # - xlarge_windows
      # - 2xlarge_windows

  arm_jobs:
    jobs:
      - run_arm_jobs_if_ec2
      - medium_arm:
          requires:
            - run_arm_jobs_if_ec2
      - large_arm:
          requires:
            - run_arm_jobs_if_ec2
  runner-test:
    jobs:
      - runner
  
  orb-test:
    jobs:
      - orb-test
